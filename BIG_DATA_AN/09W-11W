# 기말고사(09W~)

## 데이터프레임 가로로 여러 개 출력하기

```jsx
from IPython.display import display_html
# IPython.display 모듈에서 display_html 함수를 불러옵니다.
# 이 함수는 HTML 형식으로 데이터를 표시하는 데 사용됩니다.

def display_sbs(*args):
    """여러 데이터프레임 비교가 쉽게 옆쪽으로 표시한다"""
    # display_sbs라는 함수 정의, 여러 개의 데이터프레임을 인수로 받습니다.
    # """ """ 안의 내용은 함수에 대한 설명을 적는 docstring입니다.

    html_str=''
    # html_str이라는 빈 문자열 변수를 초기화합니다.
    
    for df in args:
        # 전달받은 각 데이터프레임(df)에 대해 반복합니다.
        html_str += df.to_html() + '&nbsp;'*4
        # 데이터프레임을 HTML 테이블 형식으로 변환하여 html_str에 추가합니다.
        # '&nbsp;'*4는 HTML에서 공백을 나타내며, 데이터프레임 사이에 4개의 공백을 추가합니다.
    
    display_html(html_str.replace('table','table style="display:inline"'), raw=True)
    # html_str의 'table' 태그를 'table style="display:inline"'로 바꿉니다.
    # 이렇게 하면 테이블이 인라인(inline) 스타일로 표시되어 옆쪽으로 나란히 배치됩니다.
    # raw=True는 입력된 HTML을 그대로 렌더링하라는 의미입니다.

```

## 다이아몬드 데이터셋

다이아몬드 데이터셋 : **seaborn**의 대표적 토이 데이터셋

- seaborn : 그래프를 만들 때 많이 사용하는 패키지 , 쉽고 간결한 코드로 아름다운 그래프를 만들 수 있음 (  파이썬의 대표적인 시각화 패키지인 matplotlib을 기반으로 두고 만들어짐  )

## 문제

- 연속형 변수(carat,depth,table[dtab],price,x,y,z) 각각의 이상치(1,3분위값에서 IQR*1.5 외의 값) 갯수를 데이터 프레임(변수명 ratio_df, 비율의 내림차순 정렬)으로 아래와 같이 나타내어라.

```python
lst = []
# lst라는 빈 리스트를 초기화합니다.
df = diamonds
# diamonds 데이터프레임을 df 변수에 할당합니다.
for col in ['carat', 'depth', 'dtab', 'price', 'x', 'y', 'z']:
# 특정 컬럼들에 대해 반복문을 실행합니다. (dtab은 오타로, table이 맞는 컬럼명입니다.)
# for col in ['carat', 'depth', 'table', 'price', 'x', 'y', 'z']: 
# 올바른 컬럼명을 사용한 반복문 (위의 라인 대신 사용)

    target = df[col]
    # 현재 컬럼의 데이터를 target 변수에 할당합니다.
    iqr = target.quantile(0.75) - target.quantile(0.25)
    # IQR(Interquartile Range)을 계산합니다. 이는 3사분위수와 1사분위수의 차이입니다.
    outlier = target.loc[(target > target.quantile(0.75) + iqr*1.5) | (target < target.quantile(0.25) - iqr*1.5)]
    # 이상치(outliers)를 찾습니다. 이상치는 IQR의 1.5배를 초과하는 범위에 있는 값들입니다.
    lst.append([col, len(outlier)])
    # 컬럼명과 해당 컬럼의 이상치 개수를 리스트로 만들어 lst에 추가합니다.

```

- **3사분위수(Q3) + 1.5 * IQR**: 이 값을 초과하는 데이터는 이상치로 간주.
- **1사분위수(Q1) - 1.5 * IQR**: 이 값보다 작은 데이터는 이상치로 간주.

### color에 따른 price의 max, min, 평균값을 colorDf 변수에 저장하고 아래와 같이 출력하는 코드를 작성하라

```jsx
cdf = diamonds.groupbu(['color')['price'].agg(['max','min','mean'])
cdf
```

# 12단원 인터렉티브 그래프

`!pip show plotly`는 파이썬 환경에서 Plotly 패키지에 대한 정보를 표시하기 위해 사용하는 명령어입니다. 

- 이 명령어는 주피터 노트북이나 IPython 셸에서 실행됩니다.

# 13단원 마크다운

문자 앞뒤에 *특수문자*를 넣으면 기울임체가 됩니다.

문자 앞뒤에 **특수문자**를 넣으면 강조체가 됩니다.

문자 앞뒤에 ~~특수문자~~를 넣으면 취소선을 만듭니다.

문자 앞뒤에 [특수문자](http://www.google.com/search?q=special+character)를 넣으면 하이퍼링크를 만듭니다.

# 1 단계 제목

## 2 단계 제목

### 3 단계 제목

### 4 단계 제목

## 나이와 월급의 관계 분석

```python
## 나이별 월급 평균표 만들기
age_income = welfare.dropna(subset = ['income']) \ # income 결측치 제거
                    .groupby('age') \ # age별 분리
                    .agg(mean_income = ('income', 'mean')) # income 평균 구하기
age_income.head()
```

### 기말시험

```python
# 선 그래프 만들기
sns.lineplot(data = age_income, x = 'age', y = 'mean_income'); # 기말시험
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/5e965540-9386-4b1a-bbf8-978857aa19b4/d2cace76-a9a5-4158-9a96-0adb270c862b/Untitled.png)

- 나이별로 그룹화 하여 , 각 ***나이의 평균 월급을 계산한 데이터***

```python
sns.lineplot(data = welfare, x = 'age', y = 'income'); # 기말시험
```

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/5e965540-9386-4b1a-bbf8-978857aa19b4/d58f0404-02b3-4081-acf7-a5fcb25ccbdc/Untitled.png)

- welfare 데이터 프레임 사용 (원본 데이터) , 각 개별 데이터 포인트가 포함되어있음 → 나이에 따라 ***월급 평균의 변화***

### 차이점 요약

1. **데이터프레임**
    - `age_income`: 나이별 월급 평균을 계산한 데이터.
    - `welfare`: 원본 데이터, 개별 데이터 포인트를 포함.
2. **의미**
    - `age_income` 그래프: 나이별 평균 월급의 변화를 보여줌.
    - `welfare` 그래프: 개별 데이터 포인트를 기반으로 나이와 월급 간의 관계를 보여줌.
3. **시각적 해석**
    - `age_income` 그래프: 더 부드럽고 명확한 추세를 볼 수 있음.
    - `welfare` 그래프: 데이터의 전체 분포와 변동성을 볼 수 있음.
    
    ```python
    sns.barplot(data = welfare, x = 'ageg', y = 'income', hue = 'sex', # 기말시험
                order = ['young', 'middle', 'old']);
    ```
    
    ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/5e965540-9386-4b1a-bbf8-978857aa19b4/52ba5a9f-fd5c-4d35-9532-426d4d7698c2/Untitled.png)
    
    **설명**
    
    - welfare 데이터 사용
    - x축엔 ‘aged’ 나이
    - y축엔 ‘income’ 월급
    - 순서대로 young middle old
    - hue에는 성별에 따라 막대 색상이 다른걸 보여줌
    
    **해석**
    
    - 나이대에서 남성 여성 평균월급 비교 가능
    - 막대의 높낮이로 어떤 성별이 특정 나이대에서 더 높은 평균 월급을 받는지 확인 가능
    - 나이대 별로 월급의 변화, 성별에 따른 월급 차이 확인가능

### 지역 코드 목록 만들기

```python
# 지역 코드 목록 만들기, 기말시험
list_region = pd.DataFrame({'code_region' : [1, 2, 3, 4, 5, 6, 7],
                            'region'      : ['서울',
                                             '수도권(인천/경기)',
                                             '부산/경남/울산',
                                             '대구/경북',
                                             '대전/충남',
                                             '강원/충북',
                                             '광주/전남/전북/제주도']})
list_region 

```

| code_region | region |
| --- | --- |
| 1 | 서울 |
| 2 | 수도권(인천/경기) |
| 3 | 부산/경남/울산 |
| 4 | 대구/경북 |
| 5 | 대전/충남 |
| 6 | 강원/충북 |
| 7 | 광주/전남/전북/제주도 |

### 피벗

- 피벗 테이블은 데이터를 요약하고 분석하는 데 사용되는 도구
- 데이터의 특정 열을 행과 열로 재구성하여 요약된 정보 제공
- 원본 데이터에서 집계 함수를 적용하여 새롭게 구성된 표 형태로 결과 제출
- 특정 열을 인덱스(행) , 컬럼(열) 그리고 값으로 지정 가능

```python
# 피벗, 기말시험
pivot_df = region_ageg[['region', 'ageg', 'proportion']].pivot(index   = 'region',
                                                               columns = 'ageg',
                                                               values  = 'proportion')
pivot_df
```

| egion | middle | old | young |
| --- | --- | --- | --- |
| 강원/충북 | 28.8 | 50.9 | 20.2 |
| 광주/전남/전북/제주도 | 30.7 | 49.2 | 20.0 |
| 대구/경북 | 28.1 | 55.3 | 16.7 |
| 대전/충남 | 33.0 | 45.4 | 21.6 |
| 부산/경남/울산 | 31.4 | 49.4 | 19.2 |
| 서울 | 37.7 | 43.5 | 18.8 |
| 수도권(인천/경기) | 37.8 | 37.8 | 24.4 |

---

# 10단원 텍스트 마이닝

### KoNLPy (Korean Natural Language Processing in Python)

- 한국어 자연어 처리를 위한 파이썬 패키지
- 다양한 한국어 형태소 분석기, 자연어 처리 도구를 통합하여 제공
- 한국어 텍스트 데이터의 전처리, 형태소 분석, 명사 추출, 품사 태깅 등 작업 수행 가능

***이거 기말시험***

```python
# 불필요한 문자 제거하기
import re # regular expression
moon = re.sub('[^가-힣]', ' ', moon) # 기말시험
moon
```

`re` 모듈을 임포트 `re` 모듈은 파이썬의 정규 표현식 기능 제공

`re.sub(pattern, repl, string)` 함수는 문자열에서 정규 표현식 `pattern`과 일치하는 부분을 `repl`로 대체

- `[^가-힣]`는 '가'에서 '힣' 사이의 한글 문자를 제외한 모든 문자를 의미
- 대괄호 `[]` 안의 `^`는 부정을 의미하며, 이 경우 한글 문자가 아닌 모든 문자를 의미

`repl`: `' '`

- 대체할 문자열로, 한글이 아닌 문자는 공백으로 대체합니다.

`string: ‘moon’`

- 반환할 원본 문자열

→ 결론 : 한글 문자가 아닌 모든 문자를 공백으로 대체

```python
dm = open('data/speech_moon.txt', encoding = 'UTF-8').read()
dm
d = re.sub('[가-힣]', ' ', dm)
d
```

→ 한글 문자를 전부 공백으로 대체

### ***명사 추출(기말 시험임)***

```python
# 데이터 프레임으로 변환, 기말시험
import pandas as pd
df_word = pd.DataFrame({y'word' : nouns})
df_word
```

| Index | word |
| --- | --- |
| 0 | 정권교체 |
| 1 | 정치교체 |
| 2 | 시대교체 |
| 3 | 불비불명 |
| 4 | 고사 |
| ... | ... |
| 1408 | 모두 |
| 1409 | 주인 |
| 1410 | 진정한 |
| 1411 | 우리나라 |
| 1412 | 대통령 |

### ***pandas.pydata.com 문서, 기말시험***

```python

# pandas.pydata.com 문서, 기말시험
mydf = pd.DataFrame({'col1': [1, 2], # 첫 번째 열의 데이터
											'col2': [0.5, 0.75]},  # 두 번째 열의 데이터
											index=['row1', 'row2']) # 행 인덱스 지정

mydf
```

|  | col1 | col2 |
| --- | --- | --- |
| row1 | 1 | 0.50 |
| row2 | 2 | 0.75 |

```python
# pandas.pydata.com 문서, 기말시험
mydf.to_dict()
```

{'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}

## 워드 클라우드

워드클라우드(Word Cloud)는 텍스트 데이터에서 단어의 빈도나 중요도를 시각적으로 표현하는 방법

- 단어의 크기와 색상으로 텍스트 데이터에서 빈도나 중요도 나타냄
- 빈도가 높거나 중요한 단어일수록 더 큰 글씨로 표시
- 직관적으로 이해하는데 도움됨

### 기말시험 - explode 메서드

```python
df = pd.DataFrame({'A': [[0, 1, 2], 'foo', [], [3, 4]],
                   'B': 1,
                   'C': [['a', 'b', 'c'], np.nan, [], ['d', 'e']]})
df
```

|  | A | B | C |
| --- | --- | --- | --- |
| 0 | [0, 1, 2] | 1 | [a, b, c] |
| 1 | foo | 1 | NaN |
| 2 | [] | 1 | [] |
| 3 | [3, 4] | 1 | [d, e] |

```python
df.explode('A') # 기말고사
```

`df.explode('A')`는 Pandas의 `explode` 메서드를 사용하여 데이터프레임의 특정 열을 행으로 분해하는 기능을 수행 

`explode` 메서드는 각 리스트 요소를 별도의 행으로 확장하여 데이터프레임을 변환

|  | A | B | C |
| --- | --- | --- | --- |
| 0 | 1 | 2 | 3 |
| 0 | 0 | 1 | [a, b, c] |
| 0 | 1 | 1 | [a, b, c] |
| 0 | 2 | 1 | [a, b, c] |
| 1 | foo | 1 | NaN |
| 2 | NaN | 1 | [] |
| 3 | 3 | 1 | [d, e] |
| 3 | 4 | 1 | [d, e] |

`df.explode('A')`를 실행하면, 'A' 열의 리스트 요소가 각각 별도의 행으로 확장

1. **행 0**
    - 원래 '[0, 1, 2]' 리스트가 3개의 행(0, 1, 2)으로 확장
    - 'C' 열은 리스트 전체를 유지
2. **행 1**
    - 'foo'는 리스트가 아니므로 변경되지 않고 그대로 유지
3. **행 2**
    - 빈 리스트 '[]'는 NaN으로 확장
    - 'C' 열은 빈 리스트를 유지
4. **행 3**:
    - '[3, 4]' 리스트가 2개의 행(3, 4)으로 확장
    - 'C' 열은 리스트 전체를 유지
    

### 추가 설명

- **NaN 처리**: 비어있는 리스트는 NaN으로 확장
- **리스트가 아닌 요소**: 리스트가 아닌 요소는 확장되지 않고 원래 값이 유지
- **다른 열의 값 유지**: `explode` 메서드를 적용한 열 이외의 다른 열의 값은 각 확장된 행에 동일하게 유지
